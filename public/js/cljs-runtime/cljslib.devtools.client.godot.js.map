{"version":3,"sources":["cljslib/devtools/client/godot.cljs"],"mappings":";;AAeA,AACWE;;AADX,AAAAF,AAOSG;AAPT,AAAA;;AAAA,AAAA;AAAA,AAAA,AASoBC,AAAMD;;;AAT1B,AAAA,AAAA,AAAA,AAAUF,AAYR;;AAAA,AAAA,AAAA,AACEI;AADF,AAEC,AAAMC,AACA,AAACC;AAEDJ,AACA,AAAWE;AAEXG,AACA,AAAAC;AAPN,AAQC,AAAAC,AAAMF;AAAN,AAAA,AAAAE,AAAA,AAEY;AAAA,AACE,AAAMC,AAAK,AAAA,AAAA,AAAIH;AAAf,AACE,AAACI,AAAuBT,AAAQQ;;;AAJhD,AAAAD,AAAA,AAOY,AAAKG;AAAL,AACE,AAACC,AAAyBX,AAAQU;;;AARhD,AAAAH,AAAA,AAWY,AAAKG;AAAL,AACE,AAACE,AAAyBZ,AAAQU;;;AAZhD,AAAAH,AAAA,AAeY,AAAKM;AAAL,AACE,AAACC,AAAwBd,AAAQa;;;AAhB/C,AAAAN,AAkBmBJ;;AAlBnBI;AAmBA,AAAM,AAAUL,AAAMG;;;AAzC1B,AAAA,AAAA,AAAUP,AA2CR;;AAAA,AAAA,AAAA,AACEI;AADF,AAEC,AAAO,AAAUA;;AA+BpB,AAAA,AAAMa,AACHf;AADH,AAEE,AAAMgB,AAAO,AAAAlB,AAAYE;AACnBiB,AAAU,AAAW,AAACC;AAD5B,AAEE,AAAYD,AAAUD;;AACtBA;;AAEJ,AAAA,AAAMG,AACHd,AAAOe;AADV,AAEE,AAAU,AAAA,AAAWf,AAAUe;;AAEjC,AAAA,AAAMC,AACHhB;AADH,AAEE,AAAMY,AAAU,AAAW,AAACC;AAA5B,AACE,AAAeD,AAAUZ","names":["G__26440","cljslib.devtools.client.godot/GodotRepl","js/godot.Node","runtime","self__","this","ws-url","shadow.cljs.devtools.client.env/get-ws-relay-url","socket","js/godot.WebSocketClient","G__26441","data","shadow.cljs.devtools.client.shared/remote-msg","e","shadow.cljs.devtools.client.shared/remote-close","shadow.cljs.devtools.client.shared/remote-error","p","shadow.cljs.devtools.client.shared/remote-open","cljslib.devtools.client.godot/start","client","root-node","js/godot.Engine.get_main_loop","cljslib.devtools.client.godot/send","msg","cljslib.devtools.client.godot/stop"],"sourcesContent":["(ns cljslib.devtools.client.godot\n  (:require [shadow.cljs.modern :refer (defclass)]\n            [shadow.cljs.devtools.client.env :as env]\n            [shadow.cljs.devtools.client.shared :as cljs-shared]\n            [shadow.remote.runtime.shared :as shared]\n            [shadow.remote.runtime.api :as api]))\n\n;; todo: update shadow-cljs\n;; test: use class implementation\n;; test: start -> add to root of scene tree\n;; test: stop -> remove from root of scene tree\n\n;; (defonce the-repl (atom nil))\n\n\n(defclass GodotRepl\n  (extends js/godot.Node)\n\n  (field socket nil)\n  (field runtime nil)\n\n  (constructor\n   [this runtime]\n   (super)\n   (set! (.-runtime this) runtime))\n\n  Object\n  (_ready\n   [this]\n   (let [ws-url\n         (env/get-ws-relay-url)\n\n         runtime\n         (.-runtime this)\n\n         socket\n         (js/godot.WebSocketClient.)]\n    (doto socket\n      (.connect \"data_received\"\n                (fn []\n                  (let [data (.. socket (get_peer 1) (get_var))]\n                    (cljs-shared/remote-msg runtime data))))\n\n      (.connect \"connection_closed\"\n                (fn [e]\n                  (cljs-shared/remote-close runtime e)))\n\n      (.connect \"connection_error\"\n                (fn [e]\n                  (cljs-shared/remote-error runtime e)))\n\n      (.connect \"connection_established\"\n                (fn [p]\n                  (cljs-shared/remote-open runtime p)))\n\n      (.connect_to_url ws-url))\n    (set! (.-socket this) socket)))\n\n  (_process\n   [this]\n   (.poll (.-socket this))))\n\n;; (defn start [runtime]\n;;   (let [ws-url\n;;         (env/get-ws-relay-url)\n\n;;         socket\n;;         (new (.-WebSocketClient js/godot))]\n;;     (doto socket\n;;       (.connect \"data_received\"\n;;                 (fn []\n;;                   (let [data (.. socket (get_peer 1) (get_var))]\n;;                     (cljs-shared/remote-msg runtime data))))\n\n;;       (.connect \"connection_closed\"\n;;                 (fn [e]\n;;                   (cljs-shared/remote-close runtime e)))\n\n;;       (.connect \"connection_error\"\n;;                 (fn [e]\n;;                   (cljs-shared/remote-error runtime e)))\n\n;;       (.connect \"connection_established\"\n;;                 (fn [p]\n;;                   (cljs-shared/remote-open runtime p)))\n\n;;       (.connect_to_url ws-url)\n\n;;       (loop [_ (.poll socket)]\n;;         (recur (.poll socket))))))\n\n(defn start\n  [runtime]\n  (let [client (GodotRepl. runtime)\n        root-node (.get_root (js/godot.Engine.get_main_loop))]\n    (.add_child root-node client)\n    client))\n\n(defn send\n  [socket msg]\n  (.put_var (.get_peer socket 1) msg))\n\n(defn stop\n  [socket]\n  (let [root-node (.get_root (js/godot.Engine.get_main_loop))]\n    (.remove_child root-node socket)))\n"]}